<?php

/**
 * @file
 * Install, update and uninstall functions for the DU Core install profile.
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\user\UserInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ducore_install() {
  // Set the default and admin themes.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'pl_drupal')
    ->set('admin', 'du_adminimal_theme')
    ->save(TRUE);

  // Set the front page to "/node".
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.front', '/node')
    ->save(TRUE);

  // Allow visitor account creation with administrative approval.
  \Drupal::configFactory()
    ->getEditable('user.settings')
    ->set('register', UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)
    ->save(TRUE);

  // Enable default permissions for system roles.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access content']);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->addRole('administrator');
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Enable the admin theme.
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);
}

/**
 * Implements hook_install_tasks_alter().
 */
function ducore_install_tasks_alter(array &$tasks, array $install_state) {
  $tasks['install_finished']['function'] = 'ducore_after_install_finished';
}

/**
 * DU Core tasks to do after install finished.
 *
 * Add term for protected page permission.
 *
 * @param array $install_state
 *   The current install state.
 *
 * @return array
 *   A renderable array with a redirect header.
 */
function ducore_after_install_finished(array &$install_state) {
  $new_term = Term::create([
    'vid' => 'permissions',
    'name' => 'DU Faculty, Staff and Students using SSO',
  ]);

  $new_term->enforceIsNew();
  $new_term->save();

  node_access_rebuild(TRUE);

  \Drupal::messenger()->deleteAll();

  // @TODO - Add default content during install using
  // https://www.drupal.org/project/default_content

  // Set front page and 404 defaults to default_content.
  // \Drupal::configFactory()
  //  ->getEditable('system.site')
  //  ->set('page.front', '/home')
  //  ->set('page.404', '/404')
  //  ->set('page.403', '/403')
  //  ->save(TRUE);
}

/**
 * Enable Key and Pantheon Secrets modules on existing installs
 */
function ducore_update_9001() {
  $modules = array(
    'key',
    'pantheon_secrets'
  );
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Update Site Admin Permissions
 */
function ducore_update_9002() {
  $config_id = 'user.role.site_admin';
  $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id .'.yml';
  $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
  \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
}

/**
 * Enable CKEditor5 modules on existing installs
 */
function ducore_update_9003() {
  $modules = array(
    'ckeditor5',
    'blazy',
    'media',
    'slick',
    'token_filter'
  );
  \Drupal::service('module_installer')->install($modules, TRUE);
}

/**
 * Configuration for CKEditor5 and Text Format (Rich Text) for existing installs
 */
function ducore_update_9004() {
  // While Rich Text is new we made some updates to the existing file / entity browser.
  $config_ids = array(
    'filter.format.rich_text',
    'editor.editor.rich_text',
    'embed.button.file_browser',
    'entity_browser.browser.browse_files'
  );

  // Loop through each configuration and, even if it exists, overwrite it.
  foreach ($config_ids as $config_id) {
    $config_path = \Drupal::service('extension.list.module')->getPath('ducore') . '/config/install/' . $config_id;
    $data = \Symfony\Component\Yaml\Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable($config_id)->setData($data)->save(TRUE);
  }
}
